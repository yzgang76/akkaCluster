HOST1 = 10.0.0.12
HOST2 = 16.214.129.179
HOST_LOCAL = ${HOST1}
Cluster_Name = ClusterSystem
akka {
  //  loggers = ["akka.event.slf4j.Slf4jLogger"]

  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "ERROR"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "ERROR"
  actor {
    provider = cluster
  }
  remote {
    netty.tcp {
      hostname = ${HOST_LOCAL}
      port = 2551
    }
  }
  cluster {
    seed-nodes = [
      "akka.tcp://"${Cluster_Name}"@"${HOST1}":2551"
      //      "akka.tcp://"${Cluster_Name}"@"${HOST2}":2551"
//      "akka.tcp://"${Cluster_Name}"@"${HOST1}":2552"

    ]

    # auto downing is NOT safe for production deployments.
    # you may want to use it during development, read more about it in the docs.
    //    auto-down-unreachable-after = 10s
    jmx.multi-mbeans-in-same-jvm = off
  }

}
akka.management.http {
  hostname = ${HOST_LOCAL}
  port = 8556
}
kafka {
  active = false
  bootstrap-server = ${HOST_LOCAL}
  port = 9092
}
akka.kafka.consumer {
  # Tuning property of scheduled polls.
  # Controls the interval from one scheduled poll to the next.
  poll-interval = 50ms

  # Tuning property of the `KafkaConsumer.poll` parameter.
  # Note that non-zero value means that the thread that
  # is executing the stage will be blocked. See also the `wakup-timeout` setting below.
  poll-timeout = 50ms

  # The stage will delay stopping the internal actor to allow processing of
  # messages already in the stream (required for successful committing).
  # Prefer use of `DrainingControl` over a large stop-timeout.
  stop-timeout = 30s

  # Duration to wait for `KafkaConsumer.close` to finish.
  close-timeout = 20s

  # If offset commit requests are not completed within this timeout
  # the returned Future is completed `CommitTimeoutException`.
  # The `Transactional.source` waits this ammount of time for the producer to mark messages as not
  # being in flight anymore as well as waiting for messages to drain, when rebalance is triggered.
  commit-timeout = 15s

  # If commits take longer than this time a warning is logged
  commit-time-warning = 1s

  # Not used anymore (since 1.0-RC1)
  # wakeup-timeout = 3s

  # Not used anymore (since 1.0-RC1)
  # max-wakeups = 10

  # If set to a finite duration, the consumer will re-send the last committed offsets periodically
  # for all assigned partitions. See https://issues.apache.org/jira/browse/KAFKA-4682.
  commit-refresh-interval = infinite

  # Not used anymore (since 1.0-RC1)
  # wakeup-debug = true

  # Fully qualified config path which holds the dispatcher configuration
  # to be used by the KafkaConsumerActor. Some blocking may occur.
  use-dispatcher = "akka.kafka.default-dispatcher"

  # Properties defined by org.apache.kafka.clients.consumer.ConsumerConfig
  # can be defined in this configuration section.
  kafka-clients {
    # Disable auto-commit by default
    enable.auto.commit = false
  }

  # Time to wait for pending requests when a partition is closed
  wait-close-partition = 500ms

  # Limits the query to Kafka for a topic's position
  position-timeout = 5s

  # When using `AssignmentOffsetsForTimes` subscriptions: timeout for the
  # call to Kafka's API
  offset-for-times-timeout = 5s

  # Timeout for akka.kafka.Metadata requests
  # This value is used instead of Kafka's default from `default.api.timeout.ms`
  # which is 1 minute.
  metadata-request-timeout = 5s

  # Interval for checking that transaction was completed before closing the consumer.
  # Used in the transactional flow for exactly-once-semantics processing.
  eos-draining-check-interval = 30ms
}
ossm.monitor {
  topic = OSSM_BE_METRICS
  keys {
    cmd = OBM_KEY_REFRESH
    record = OBM_METRICS
  }
  collector {
    test {
      name = testKPI
      host = ${HOST_LOCAL}
      interval = 10
      desc = test
    }
  }
  cache{
    max-record-number=1000
  }
}